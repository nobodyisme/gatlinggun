#!/usr/bin/env python
from ConfigParser import ConfigParser
import copy
import json
import logging
import sys
import time

import elliptics
from opster import command

from gatlinggun.config import JsonConfig
from gatlinggun import daemon
from gatlinggun.errors import ConnectionError, InvalidDataError, EmptyQueue
from gatlinggun.gun import Gun
from gatlinggun.transport import ZkTransport as Transport


DEFAULT_CONFIG_PATH = '/etc/elliptics/gatlinggun/gatlinggun.conf'
DEFAULT_LOGGING_CONFIG_PATH = '/etc/elliptics/gatlinggun/logging.conf'

DEFAULT_LOGGING_PATH = '/var/log/gatlinggun/elliptics.log'
DEFAULT_LOGGING_MASK = 31

DEFAULT_PIDFILE = '/var/run/elliptics-gatlinggun/gatlinggun'


def import_object(object_name):
    module_path = object_name.split('.')
    import_path = module_path[0]
    module = __import__(import_path)

    obj_ = module
    for part in module_path[1:]:
        obj_ = getattr(obj_, part)
    return obj_


def setup_logger(log_config):

    formatters = {}
    for formatter, settings in log_config['formatters'].iteritems():
        class_ = import_object(settings['class'])
        formatters[formatter] = class_()

    handlers = {}
    for handler, settings in log_config['handlers'].iteritems():
        settings_ = copy.copy(settings)
        class_ = import_object(settings_.pop('class'))
        level_ = getattr(logging, settings_.pop('level', 'NOTSET'))
        formatter_ = settings_.pop('formatter', 'default')
        handler_obj = class_(**settings_)
        handler_obj.setLevel(level_)
        handler_obj.setFormatter(formatters[formatter_])
        handlers[handler] = handler_obj

    for logger, settings in log_config['loggers'].iteritems():
        logger = logging.getLogger(logger)
        logger.setLevel(getattr(logging, settings.get('level', 'NOTSET')))
        for handler in settings['handler']:
            logger.addHandler(handlers[handler])


def parse_address(s, default_port=None):
    parts = s.split(':', 1)
    try:
        host, port = parts[0], len(parts) == 2 and int(parts[1]) or default_port
    except (TypeError, ValueError):
        raise ValueError('Bad host address: %s' % s)
    return host, port


@command(usage='-g GROUP -e ELLIPTICS-NODE -z ZOOKEEPER-HOST -l LOGGING_CONFIG '
               '[--daemonize] [--pidfile PIDFILE] [--user USER]')
def main(group=('g', '', 'Group id of node where daemon is being run'),
         enode=('e', '', 'Elliptics node which daemon will use for cache distribution'),
         zhost=('z', '', 'Zookeper queue for cache tasks fetching'),
         config=('c', DEFAULT_CONFIG_PATH, 'Application config file'),
         log_config=('l', DEFAULT_LOGGING_CONFIG_PATH, 'Application logging config file'),
         daemonize=('', False, 'Daemonize this process'),
         pidfile=('', None, 'Use this pidfile'),
         user=('', None, '')):
    """This script starts gatling gun daemon that
    distributes keys to designated cache nodes"""

    # if not enode or not zhost or not group:
    #     main.help()
    #     sys.exit(1)

    main_config = ConfigParser()
    main_config.read(config)

    group = group or main_config.get('global', 'group')
    enode = enode or main_config.get('elliptics', 'host')
    zhost = zhost or main_config.get('zookeeper', 'host')
    user = user or main_config.get('global', 'user')

    if daemonize:
        d = daemon.Daemon(pidfile or DEFAULT_PIDFILE, user)
        d.run = run
        d.start(group, enode, zhost, log_config)
    else:
        run(group, enode, zhost, log_config)


def run(group, enode, zhost, config_fname):
    parts = enode.split(':', 1)
    ehost, eport = parse_address(enode)
    group = int(group)

    logging_config = JsonConfig(config_fname)
    setup_logger(logging_config['logging'])

    logger = logging.getLogger()
    logger.info('Group %d' % group)

    logger.info('Connection to elliptics node %s:%s' % (ehost, eport))
    node = elliptics.Node(elliptics.Logger(DEFAULT_LOGGING_PATH, DEFAULT_LOGGING_MASK))
    node.add_remote(ehost, eport)

    gun = Gun(node)
    logger.info('Connection to transport node %s' % zhost)
    if isinstance(zhost, unicode):
        zhost = zhost.encode('utf-8')
    transport = Transport(host=zhost, group=group, timeout=3)

    logger.info('Starting task processing')

    while True:
        logger.info('Fetching task from queue')

        try:
            with transport.item() as item:
                if not item:
                    raise EmptyQueue('No item fetched')
                task = json.loads(item)

                logger.info('Task %s fetched: %s' % (task['key'], task))
                gun.process(task)
                logger.info('Task %s processed' % (task['key'],))

        except (ConnectionError, InvalidDataError) as e:
            logger.error(e)
            pass
        except EmptyQueue:
            pass
        except Exception as e:
            logger.error(type(e))
            logger.exception(e)
            # the last key was unlocked, we are sleeping for that matter cause
            # we are hoping that some other daemon with fetch it and do better
            time.sleep(0.5)
            pass


if __name__ == '__main__':
    main.command()