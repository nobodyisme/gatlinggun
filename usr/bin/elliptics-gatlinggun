#!/usr/bin/env python
import json
import logging
from logging.handlers import SysLogHandler, RotatingFileHandler
import opster
import sys
import time

import elliptics
from opster import command

from gatlinggun import daemon
from gatlinggun.errors import ConnectionError, InvalidDataError, EmptyQueue
from gatlinggun.gun import Gun
from gatlinggun.transport import ZkTransport as Transport


DEFAULT_ZOOKEEPER_HOST = '127.0.0.1'
DEFAULT_ZOOKEEPER_PORT = '2181'

DEFAULT_LOGGING_PATH = '/var/log/gatlinggun/elliptics.log'
DEFAULT_LOGGING_MASK = 31

DEFAULT_PIDFILE = '/var/run/elliptics-gatlinggun/gatlinggun'


def setup_logger():
    logger_ = logging.getLogger('gatlinggun')
    logger_.setLevel(logging.DEBUG)

    # handler = SysLogHandler(address='/dev/log')

    # my_logger.addHandler(handler)
    handler = RotatingFileHandler('/var/log/gatlinggun/daemon.log')

    formatter = logging.Formatter('%(asctime)s %(processName)s-%(process)s [%(levelname)s] %(message)s')
    handler.setFormatter(formatter)

    logger_.addHandler(handler)

    logger_.debug('this is debug')
    logger_.critical('this is critical')
    return logger_

logger = setup_logger()

def parse_address(s, default_port=None):
    parts = s.split(':', 1)
    try:
        host, port = parts[0], len(parts) == 2 and int(parts[1]) or default_port
    except (TypeError, ValueError):
        raise ValueError('Bad host address: %s' % s)
    return host, port


@command(usage='-g GROUP -e ELLIPTICS-NODE -z ZOOKEEPER-HOST '
               '[--daemonize] [--pidfile PIDFILE] [--user USER]')
def main(group=('g', '', 'Group id of node where daemon is being run'),
         enode=('e', '', 'Elliptics node which daemon will use for cache distribution'),
         zhost=('z', '%s:%s' % (DEFAULT_ZOOKEEPER_HOST, DEFAULT_ZOOKEEPER_PORT),
                'Zookeper queue for cache tasks fetching'),
         daemonize=('', False, 'Daemonize this process'),
         pidfile=('', None, 'Use this pidfile'),
         user=('', None, '')):
    """This script starts gatling gun daemon that
    distributes keys to designated cache nodes"""

    if not elliptics or not zhost or not group:
        main.help()
        sys.exit(1)

    if daemonize:
        d = daemon.Daemon(pidfile or DEFAULT_PIDFILE, user)
        d.run = run
        d.start(group, enode, zhost)
    else:
        run(group, enode, zhost)


def run(group, enode, zhost):
    parts = enode.split(':', 1)
    ehost, eport = parse_address(enode)
    group = int(group)
    logger.info('Group %d' % group)

    logger.info('Connection to elliptics node %s:%s' % (ehost, eport))
    node = elliptics.Node(elliptics.Logger(DEFAULT_LOGGING_PATH, DEFAULT_LOGGING_MASK))
    node.add_remote(ehost, eport)

    gun = Gun(node, group)
    logger.info('Connection to transport node %s' % zhost)
    transport = Transport(zhost, group, timeout=3)

    logger.info('Starting task processing')

    while True:
        logger.info('Fetching task from queue')

        try:
            with transport.item() as item:
                if not item:
                    raise EmptyQueue('No item fetched')
                task = json.loads(item)

                logger.info('Task %s fetched: %s' % (task['key'], task))
                gun.fire(task['key'].encode('utf-8'), from_=task['sgroups'], to_=task['dgroups'])
                logger.info('Task %s processed' % (task['key'],))

        except (ConnectionError, InvalidDataError) as e:
            logger.error(e)
            pass
        except EmptyQueue:
            pass
        except Exception as e:
            logger.error(type(e))
            logger.exception(e)
            # the last key was unlocked, we are sleeping for that matter cause
            # we are hoping that some other daemon with fetch it and do better
            time.sleep(0.5)
            pass


if __name__ == '__main__':
    main.command()